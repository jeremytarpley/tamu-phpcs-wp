<?xml version="1.0"?>
<ruleset name="JeremysRules">
	<description>
		WordPress security checks and a few rules for best practices.

		To install:
		composer require --dev pheromone/phpcs-security-audit
		composer global config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
		composer global require --dev wp-coding-standards/wpcs:"^3.0" -W

		To run:
		phpcs --standard=./tamu_wp_ruleset.xml ./kamu/
	</description>

	<arg name="basepath" value="."/>
	<arg name="extensions" value="php,inc,lib,module,info"/>
	<arg name="colors"/>
	<arg name="parallel" value="75"/>
	<arg value="p"/>
	<arg value="l"/>
	<arg value="s"/>
	<arg value="vvv"/>

	<!-- Global properties -->
	<!-- Please note that not every sniff uses them and they can be overwritten by rule -->
	<!-- Paranoya mode: Will generate more alerts but will miss less vulnerabilites. Good for assisting manual code review. -->
	<config name="ParanoiaMode" value="1"/>

	<!-- Important to prevent issues with content being sent before headers. -->
	<rule ref="Generic.Files.ByteOrderMark"/>
	<!-- Ban some functions -->
	<rule ref="Generic.PHP.ForbiddenFunctions">
		<properties>
			<property name="forbiddenFunctions" type="array">
				<element key="sizeof" value="count"/>
				<element key="delete" value="unset"/>
				<element key="print" value="echo"/>
				<element key="is_null" value="null"/>
				<element key="create_function" value="null"/>
			</property>
		</properties>
	</rule>

	<!-- Don't hide tokenizer exceptions -->
	<rule ref="Internal.Tokenizer.Exception">
		<type>error</type>
	</rule>

	<!-- Generic PHP best practices.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/382 
		 from https://github.com/WordPress/WordPress-Coding-Standards/blob/develop/WordPress-Extra/ruleset.xml
	-->
	<rule ref="Generic.PHP.Syntax"/>
	<!-- Checks syntax, definitely not perfect, gets some false positives if php and html is messy -->

	<!-- Covers rule: Never use shorthand PHP start tags. Always use full PHP tags. -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.ForbiddenFunctions"/>
	<rule ref="Generic.Functions.CallTimePassByReference"/>
	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
	<rule ref="Generic.Classes.DuplicateClassName"/>

	<!-- There should be no empty statements, i.e. lone semi-colons or open/close tags without content. -->
	<rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>

	<!-- Error on merge conflict markers. -->
	<rule ref="Generic.VersionControl.GitMergeConflict"/>

	<!-- Covers rule: The goto statement must never be used. -->
	<rule ref="Generic.PHP.DiscourageGoto">
		<type>error</type>
		<message>The "goto" language construct should not be used.</message>
	</rule>

	<!-- Covers rule: The eval() construct is very dangerous, and is impossible to secure. ... these must not be used. -->
	<rule ref="Squiz.PHP.Eval.Discouraged">
		<type>error</type>
		<message>eval() is a security risk so not allowed.</message>
	</rule>

	<!-- Check that __DIR__ is favoured over dirname(__FILE__)
		 and that dirname( __DIR__, $levels ) is favoured over nested calls to dirname().
		 See: https://core.trac.wordpress.org/ticket/48082 -->
	<rule ref="Modernize.FunctionCalls.Dirname"/>

	<!-- Detect useless "echo sprintf(...)". -->
	<rule ref="Universal.CodeAnalysis.NoEchoSprintf"/>

	<!-- BadFunctions -->
	<!-- PHP functions that can lead to security issues -->
	<rule ref="Security.BadFunctions.Asserts"/>
	<rule ref="Security.BadFunctions.Backticks"/>
	<rule ref="Security.BadFunctions.CallbackFunctions"/>
	<rule ref="Security.BadFunctions.CryptoFunctions"/>
	<rule ref="Security.BadFunctions.EasyRFI"/>
	<rule ref="Security.BadFunctions.ErrorHandling"/>
	<rule ref="Security.BadFunctions.FilesystemFunctions"/>
	<rule ref="Security.BadFunctions.FringeFunctions"/>
	<rule ref="Security.BadFunctions.FunctionHandlingFunctions"/>
	<rule ref="Security.BadFunctions.Mysqli"/>
	<rule ref="Security.BadFunctions.NoEvals"/>
	<rule ref="Security.BadFunctions.Phpinfos"/>
	<rule ref="Security.BadFunctions.PregReplace"/>
	<rule ref="Security.BadFunctions.SQLFunctions"/>
	<rule ref="Security.BadFunctions.SystemExecFunctions"/>
	<rule ref="Security.Misc.BadCorsHeader"/>
	<rule ref="Security.Misc.IncludeMismatch"/>

	<!-- EasyXSS picks up every echo that doesn't have a sanitization function. Doesn't recognize WP sanitize functions-->
	<!--<rule ref="Security.BadFunctions.EasyXSS"> -->
	<!--<properties>-->
	<!-- Comment out to follow global ParanoiaMode -->
	<!--<property name="forceParanoia" value="1"/>-->
	<!--</properties>-->
	<!--</rule>-->


	<!-- Use the appropriate DateTime functions.
		 See: https://github.com/WordPress/WordPress-Coding-Standards/issues/1713 -->
	<rule ref="WordPress.DateTime.RestrictedFunctions"/>

	<!-- Don't use current_time() to retrieve a timestamp. -->
	<rule ref="WordPress.DateTime.CurrentTimeTimestamp"/>

	<rule ref="WordPress.DB.DirectDatabaseQuery"/>
	<rule ref="WordPress.DB.PreparedSQLPlaceholders"/>
	<rule ref="WordPress.DB.PreparedSQL"/>
	<rule ref="WordPress.DB.RestrictedClasses"/>
	<rule ref="WordPress.DB.RestrictedFunctions"/>
	<rule ref="WordPress.DB.SlowDBQuery"/>
	<rule ref="WordPress.PHP.DevelopmentFunctions"/>
	<rule ref="WordPress.PHP.DiscouragedPHPFunctions"/>
	<rule ref="WordPress.PHP.DontExtract"/>
	<rule ref="WordPress.PHP.IniSet"/>
	<rule ref="WordPress.PHP.NoSilencedErrors"/>
	<rule ref="WordPress.PHP.RestrictedPHPFunctions"/>
	<rule ref="WordPress.Security.EscapeOutput"/>
	<rule ref="WordPress.Security.NonceVerification"/>
	<rule ref="WordPress.Security.PluginMenuSlug"/>
	<rule ref="WordPress.Security.SafeRedirect"/>
	<rule ref="WordPress.Security.ValidatedSanitizedInput"/>
	<rule ref="WordPress.WP.AlternativeFunctions"/>
	<rule ref="WordPress.WP.CronInterval"/>
	<rule ref="WordPress.WP.DiscouragedConstants"/>
	<rule ref="WordPress.WP.DeprecatedClasses"/>
	<rule ref="WordPress.WP.DeprecatedFunctions"/>
	<rule ref="WordPress.WP.DeprecatedParameters"/>
	<rule ref="WordPress.WP.DeprecatedParameterValues"/>
	<rule ref="WordPress.WP.DiscouragedFunctions"/>
	<rule ref="WordPress.WP.PostsPerPage"/>
	<rule ref="WordPress.WP.EnqueuedResources"/>
	<rule ref="WordPress.WP.EnqueuedResourceParameters"/>

	<!-- Verify that capabilities are being used correctly. -->
	<rule ref="WordPress.WP.Capabilities"/>

	<!-- Warn against overriding WP global variables.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/26 -->
	<rule ref="WordPress.WP.GlobalVariablesOverride"/>

	<!-- Verify that everything in the global namespace is prefixed. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals"/>

	<!-- Validates post type slugs for valid characters, length and reserved keywords. -->
	<rule ref="WordPress.NamingConventions.ValidPostTypeSlug"/>
</ruleset>
